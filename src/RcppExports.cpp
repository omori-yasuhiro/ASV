// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sv_mcmc
Rcpp::List sv_mcmc(arma::vec return_vector, Rcpp::Nullable<double> nSim, Rcpp::Nullable<double> nBurn, Rcpp::Nullable<Rcpp::NumericVector> vHyper);
RcppExport SEXP _ASV_sv_mcmc(SEXP return_vectorSEXP, SEXP nSimSEXP, SEXP nBurnSEXP, SEXP vHyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type vHyper(vHyperSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_mcmc(return_vector, nSim, nBurn, vHyper));
    return rcpp_result_gen;
END_RCPP
}
// asv_mcmc
Rcpp::List asv_mcmc(arma::vec return_vector, Rcpp::Nullable<double> nSim, Rcpp::Nullable<double> nBurn, Rcpp::Nullable<Rcpp::NumericVector> vHyper);
RcppExport SEXP _ASV_asv_mcmc(SEXP return_vectorSEXP, SEXP nSimSEXP, SEXP nBurnSEXP, SEXP vHyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type vHyper(vHyperSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_mcmc(return_vector, nSim, nBurn, vHyper));
    return rcpp_result_gen;
END_RCPP
}
// sv_pf
double sv_pf(double mu, double phi, double sigma_eta, arma::vec Y, int I);
RcppExport SEXP _ASV_sv_pf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(sv_pf(mu, phi, sigma_eta, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// sv_apf
double sv_apf(double mu, double phi, double sigma_eta, arma::vec Y, int I);
RcppExport SEXP _ASV_sv_apf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(sv_apf(mu, phi, sigma_eta, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// asv_pf
double asv_pf(double mu, double phi, double sigma_eta, double rho, arma::vec Y, int I);
RcppExport SEXP _ASV_asv_pf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(asv_pf(mu, phi, sigma_eta, rho, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// asv_apf
double asv_apf(double mu, double phi, double sigma_eta, double rho, arma::vec Y, int I);
RcppExport SEXP _ASV_asv_apf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(asv_apf(mu, phi, sigma_eta, rho, Y, I));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ASV_sv_mcmc", (DL_FUNC) &_ASV_sv_mcmc, 4},
    {"_ASV_asv_mcmc", (DL_FUNC) &_ASV_asv_mcmc, 4},
    {"_ASV_sv_pf", (DL_FUNC) &_ASV_sv_pf, 5},
    {"_ASV_sv_apf", (DL_FUNC) &_ASV_sv_apf, 5},
    {"_ASV_asv_pf", (DL_FUNC) &_ASV_asv_pf, 6},
    {"_ASV_asv_apf", (DL_FUNC) &_ASV_asv_apf, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ASV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
