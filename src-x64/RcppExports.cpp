// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sv_mcmc
Rcpp::List sv_mcmc(arma::vec return_vector, Rcpp::Nullable<double> nSim, Rcpp::Nullable<double> nBurn, Rcpp::Nullable<Rcpp::NumericVector> vHyper);
RcppExport SEXP _ASV_sv_mcmc(SEXP return_vectorSEXP, SEXP nSimSEXP, SEXP nBurnSEXP, SEXP vHyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type vHyper(vHyperSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_mcmc(return_vector, nSim, nBurn, vHyper));
    return rcpp_result_gen;
END_RCPP
}
// asv_mcmc
Rcpp::List asv_mcmc(arma::vec return_vector, Rcpp::Nullable<double> nSim, Rcpp::Nullable<double> nBurn, Rcpp::Nullable<Rcpp::NumericVector> vHyper);
RcppExport SEXP _ASV_asv_mcmc(SEXP return_vectorSEXP, SEXP nSimSEXP, SEXP nBurnSEXP, SEXP vHyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type return_vector(return_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type vHyper(vHyperSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_mcmc(return_vector, nSim, nBurn, vHyper));
    return rcpp_result_gen;
END_RCPP
}
// sv_sample_s
arma::vec sv_sample_s(arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_sv_sample_s(SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_sample_s(h, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_kalman_filter
Rcpp::List sv_kalman_filter(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_sv_kalman_filter(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_kalman_filter(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_sim_smoother
arma::vec sv_sim_smoother(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_sv_sim_smoother(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_sim_smoother(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_loglikelihood
double sv_loglikelihood(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_sv_loglikelihood(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_loglikelihood(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_loglikelihood_theta
double sv_loglikelihood_theta(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_sv_loglikelihood_theta(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_loglikelihood_theta(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_theta_post_max
double sv_theta_post_max(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_sv_theta_post_max(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_theta_post_max(x, h));
    return rcpp_result_gen;
END_RCPP
}
// sv_deriv1
arma::vec sv_deriv1(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_sv_deriv1(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_deriv1(x, h));
    return rcpp_result_gen;
END_RCPP
}
// sv_deriv2
arma::mat sv_deriv2(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_sv_deriv2(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_deriv2(x, h));
    return rcpp_result_gen;
END_RCPP
}
// sv_Opt
arma::vec sv_Opt(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_sv_Opt(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_Opt(x, h));
    return rcpp_result_gen;
END_RCPP
}
// sv_sample_theta
arma::vec sv_sample_theta(arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_sv_sample_theta(SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_sample_theta(h, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_sample_h
arma::vec sv_sample_h(arma::vec s, arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_sv_sample_h(SEXP sSEXP, SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sv_sample_h(s, h, theta));
    return rcpp_result_gen;
END_RCPP
}
// sv_pf
double sv_pf(double mu, double phi, double sigma_eta, arma::vec Y, int I);
RcppExport SEXP _ASV_sv_pf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(sv_pf(mu, phi, sigma_eta, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// sv_apf
double sv_apf(double mu, double phi, double sigma_eta, arma::vec Y, int I);
RcppExport SEXP _ASV_sv_apf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(sv_apf(mu, phi, sigma_eta, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// asv_sample_s
arma::vec asv_sample_s(arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_asv_sample_s(SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_sample_s(h, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_kalman_filter
Rcpp::List asv_kalman_filter(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_asv_kalman_filter(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_kalman_filter(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_sim_smoother
arma::vec asv_sim_smoother(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_asv_sim_smoother(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_sim_smoother(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_loglikelihood
double asv_loglikelihood(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_asv_loglikelihood(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_loglikelihood(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_loglikelihood_theta
double asv_loglikelihood_theta(arma::vec s, arma::vec theta);
RcppExport SEXP _ASV_asv_loglikelihood_theta(SEXP sSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_loglikelihood_theta(s, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_theta_post_max
double asv_theta_post_max(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_asv_theta_post_max(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_theta_post_max(x, h));
    return rcpp_result_gen;
END_RCPP
}
// asv_deriv1
arma::vec asv_deriv1(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_asv_deriv1(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_deriv1(x, h));
    return rcpp_result_gen;
END_RCPP
}
// asv_deriv2
arma::mat asv_deriv2(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_asv_deriv2(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_deriv2(x, h));
    return rcpp_result_gen;
END_RCPP
}
// asv_Opt
arma::vec asv_Opt(arma::vec x, arma::vec h);
RcppExport SEXP _ASV_asv_Opt(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_Opt(x, h));
    return rcpp_result_gen;
END_RCPP
}
// asv_sample_theta
arma::vec asv_sample_theta(arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_asv_sample_theta(SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_sample_theta(h, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_sample_h
arma::vec asv_sample_h(arma::vec s, arma::vec h, arma::vec theta);
RcppExport SEXP _ASV_asv_sample_h(SEXP sSEXP, SEXP hSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_sample_h(s, h, theta));
    return rcpp_result_gen;
END_RCPP
}
// asv_mysample
arma::vec asv_mysample(arma::vec h, int I, arma::vec prob);
RcppExport SEXP _ASV_asv_mysample(SEXP hSEXP, SEXP ISEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(asv_mysample(h, I, prob));
    return rcpp_result_gen;
END_RCPP
}
// asv_pf
double asv_pf(double mu, double phi, double sigma_eta, double rho, arma::vec Y, int I);
RcppExport SEXP _ASV_asv_pf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(asv_pf(mu, phi, sigma_eta, rho, Y, I));
    return rcpp_result_gen;
END_RCPP
}
// asv_apf
double asv_apf(double mu, double phi, double sigma_eta, double rho, arma::vec Y, int I);
RcppExport SEXP _ASV_asv_apf(SEXP muSEXP, SEXP phiSEXP, SEXP sigma_etaSEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_eta(sigma_etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(asv_apf(mu, phi, sigma_eta, rho, Y, I));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ASV_sv_mcmc", (DL_FUNC) &_ASV_sv_mcmc, 4},
    {"_ASV_asv_mcmc", (DL_FUNC) &_ASV_asv_mcmc, 4},
    {"_ASV_sv_sample_s", (DL_FUNC) &_ASV_sv_sample_s, 2},
    {"_ASV_sv_kalman_filter", (DL_FUNC) &_ASV_sv_kalman_filter, 2},
    {"_ASV_sv_sim_smoother", (DL_FUNC) &_ASV_sv_sim_smoother, 2},
    {"_ASV_sv_loglikelihood", (DL_FUNC) &_ASV_sv_loglikelihood, 2},
    {"_ASV_sv_loglikelihood_theta", (DL_FUNC) &_ASV_sv_loglikelihood_theta, 2},
    {"_ASV_sv_theta_post_max", (DL_FUNC) &_ASV_sv_theta_post_max, 2},
    {"_ASV_sv_deriv1", (DL_FUNC) &_ASV_sv_deriv1, 2},
    {"_ASV_sv_deriv2", (DL_FUNC) &_ASV_sv_deriv2, 2},
    {"_ASV_sv_Opt", (DL_FUNC) &_ASV_sv_Opt, 2},
    {"_ASV_sv_sample_theta", (DL_FUNC) &_ASV_sv_sample_theta, 2},
    {"_ASV_sv_sample_h", (DL_FUNC) &_ASV_sv_sample_h, 3},
    {"_ASV_sv_pf", (DL_FUNC) &_ASV_sv_pf, 5},
    {"_ASV_sv_apf", (DL_FUNC) &_ASV_sv_apf, 5},
    {"_ASV_asv_sample_s", (DL_FUNC) &_ASV_asv_sample_s, 2},
    {"_ASV_asv_kalman_filter", (DL_FUNC) &_ASV_asv_kalman_filter, 2},
    {"_ASV_asv_sim_smoother", (DL_FUNC) &_ASV_asv_sim_smoother, 2},
    {"_ASV_asv_loglikelihood", (DL_FUNC) &_ASV_asv_loglikelihood, 2},
    {"_ASV_asv_loglikelihood_theta", (DL_FUNC) &_ASV_asv_loglikelihood_theta, 2},
    {"_ASV_asv_theta_post_max", (DL_FUNC) &_ASV_asv_theta_post_max, 2},
    {"_ASV_asv_deriv1", (DL_FUNC) &_ASV_asv_deriv1, 2},
    {"_ASV_asv_deriv2", (DL_FUNC) &_ASV_asv_deriv2, 2},
    {"_ASV_asv_Opt", (DL_FUNC) &_ASV_asv_Opt, 2},
    {"_ASV_asv_sample_theta", (DL_FUNC) &_ASV_asv_sample_theta, 2},
    {"_ASV_asv_sample_h", (DL_FUNC) &_ASV_asv_sample_h, 3},
    {"_ASV_asv_mysample", (DL_FUNC) &_ASV_asv_mysample, 3},
    {"_ASV_asv_pf", (DL_FUNC) &_ASV_asv_pf, 6},
    {"_ASV_asv_apf", (DL_FUNC) &_ASV_asv_apf, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ASV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
